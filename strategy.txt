

What is a Traceability Matrix?

    A traceability matrix is a document used in software development and testing 
    to ensure that all requirements defined for a system are tested in the test protocols. 

    It maps and traces user requirements with test cases.
    The primary purpose is to ensure that all requirements are covered by test cases, 
    thereby guaranteeing that no functionality is left untested.


What Should It Contain?

    Requirement ID: 
        Unique identifier for each requirement.
    Requirement Description: 
        Brief description of the requirement.
    Test Case ID: 
        Unique identifier for each test case.
    Test Case Description: 
        Brief description of what the test case does.
    Status: 
        Indicates whether the test case has been executed and its outcome (pass/fail).
    Comments: 
        Any additional information or observations.

Steps to Create a Traceability Matrix

    List All Requirements:
        Identify all the requirements that need to be tested. These should be detailed and uniquely identified.
    List All Test Cases:
        Identify or create all test cases that will be used to verify the requirements.
    Map Requirements to Test Cases:
        Create a matrix that links each requirement to its corresponding test case(s).
    Execute Test Cases:
        Run the test cases and record the results.
    Update the Matrix:
        Reflect the status of each test case in the matrix.

. . . 

Requirements:


    Correctness:

    9,223,372,036,854,775,807
    18,446,744,073,709,551,61512

        Original data should be equal for:                                                          Tests:
        - Pickling and unpickling integers within and at the edges of the signed 64-bit range.      (3)
        - Pickling and unpickling integers within the unsigned 64-bit range.                        (1)
        - Pickling and unpickling floats with less than 16 decimals.                                (1)
        - Pickling and unpickling floats with 16 or more decimals.                                  (2)
        - Pickling and unpickling strings with 128 characters or less.                              (2)
        - Pickling and unpickling an empty string.                                                  (1)

        - Pickling and unpickling lists of floats, integers and strings                             (3)
            with 64 elements or less should return equivalent output.
        - Pickling and unpickling tuples and sets should maintain the order of elements.            (6)

        - Time needed to pickle integers and floats within the                                      (3) 
            unsigned 64-bit range, as well as equal sized strings
            should never differ with more than 10 miliseconds.
        
3

    The same input always gives an identical output.
    The unpickled data is equal to the original data.
    The pickle should be the same for both Windows and Ubuntu.
    The output should be the same for python 3.8, 3.9 and 3.10.

Pickle a sizable amount of data 999999 times and compare all of the pickles.

